generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "prismaSchemaFolder", "omitApi", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      String     @id @default(uuid())
  email        String     @unique
  phone        String     @unique
  fullname     String
  password     String
  nationality  Country?
  last_booking DateTime   @default(now())
  nights       Int        @default(0)
  books        Int        @default(0)
  create_at    DateTime   @default(now())
  update_at    DateTime   @updatedAt
  auth         Auth?
  roles        UserRole[]
  booking      Booking[]
  session      Session[]

  @@index([email], type: Hash)
  @@index([phone], type: Hash)
}

model Room {
  room_id         String      @id @default(cuid())
  branch          Branch      @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade, onUpdate: Cascade)
  branch_id       String
  price_per_night Int
  price_per_month Int
  name            String
  description     String[]
  comforts        String[]
  bed_type        RoomBedType
  booking_turn    Int         @default(0)
  status          RoomStatus  @default(available)
  stock           Int
  acreage         Int
  available_from  DateTime?
  available_to    DateTime?
  max_adults      Int
  max_children    Int
  max_babies      Int
  images          String[]
  booking         Booking[]
}

model Branch {
  branch_id        String            @id @default(cuid())
  name             String            @unique
  description      String[]
  url              String            @unique
  trademark        TradeMark
  province         String
  ward             String
  best_comforts    String[]
  location         String
  images           String[]
  rooms            Room[]
  surrounding_area SurroundingArea[]
}

model SurroundingArea {
  area_id   String @id @default(cuid())
  name      String
  distance  String
  branch    Branch @relation(fields: [branch_id], references: [branch_id], onDelete: Cascade, onUpdate: Cascade)
  branch_id String
}

model Auth {
  auth_id      String   @id
  user         User     @relation(fields: [auth_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  last_sent_at DateTime
  code         String
  auth_type    AuthType
}

model Booking {
  booking_id        String        @id @default(cuid())
  accepted          Boolean       @default(false)
  user_id           String?
  user              User?         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  adults            Int           @default(1)
  children          Int           @default(0)
  checkin           DateTime
  checkout          DateTime
  fullname_order    String
  fullname_customer String?
  email_order       String
  email_customer    String?
  phone_order       String
  phone_customer    String?
  note              String?
  type              BookingType
  create_at         DateTime      @default(now())
  babies            Int           @default(0)
  amount            Int
  currency          Currency      @default(VND)
  order_code        Int           @unique @default(autoincrement())
  range             BookingRange
  status            BookingStatus @default(pending)
  room              Room          @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: Cascade)
  room_id           String
}

model Session {
  session_id  String   @id @default(cuid())
  create_at   DateTime @default(now())
  device_data String?
  ip          String?
  user_id     String
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}
